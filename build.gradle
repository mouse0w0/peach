plugins {
    id 'java-library'
    id 'application'
    id 'idea'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

String buildNumber = 'git rev-list --count HEAD'.execute().text.trim()

group = 'com.github.mouse0w0'
version = "0.1.0.${buildNumber}-SNAPSHOT"
mainClassName = 'com.github.mouse0w0.peach.Peach'
java.toolchain.languageVersion = JavaLanguageVersion.of(17)
compileJava.options.encoding = 'UTF-8'

repositories {
    maven { url 'https://maven.aliyun.com/repository/public' }
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

dependencies {
    api 'org.jetbrains:annotations:24.1.0'
    api('com.google.guava:guava:33.1.0-jre') {
        transitive = false
    }
    api 'org.apache.commons:commons-lang3:3.14.0'
    api 'commons-io:commons-io:2.16.1'
    api 'org.ow2.asm:asm-commons:9.7'
    api 'com.google.code.gson:gson:2.10.1'
    api 'org.freemarker:freemarker:2.3.32'
    api 'it.unimi.dsi:fastutil:8.5.13'
    api('org.dom4j:dom4j:2.1.4') {
        transitive = false
    }
    api 'com.github.mouse0w0:version:1.4.0'
    api 'com.github.mouse0w0:gridview:17.0.0'
    api 'com.github.mouse0w0:software-renderer:6f7dc5c2b5'
    api 'com.anyascii:anyascii:0.3.2'
    api 'org.controlsfx:controlsfx:11.2.1'
    api 'org.apache.xmlgraphics:batik-bridge:1.17'

    api 'org.slf4j:slf4j-api:2.0.12'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'

    testRuntimeOnly 'org.slf4j:slf4j-simple:2.0.13'
}

javafx {
    version = '22'
    modules = ['javafx.base', 'javafx.graphics', 'javafx.controls', 'javafx.fxml', 'javafx.swing']
}

jar {
    String gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
    String gitVersion = 'git rev-parse --short HEAD'.execute().text.trim()
    manifest.attributes([
            "Main-Class"              : mainClassName,
            "Implementation-Title"    : rootProject.name,
            "Implementation-Version"  : rootProject.version,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Git-Branch"              : gitBranch,
            "Git-Version"             : gitVersion,
            "Git-BuildNumber"         : buildNumber
    ])
}

startScripts.enabled = false

tasks.register('cleanPlugins') {
    doFirst {
        delete layout.buildDirectory.dir('plugin')
    }
}

file('plugin').eachDir { pluginDir ->
    tasks.register("zipPlugin(${pluginDir.getName()})", Zip.class) { task ->
        task.from pluginDir
        task.destinationDirectory = layout.buildDirectory.dir("plugin")
        task.archiveFileName = pluginDir.getName() + '.zip'
        task.group 'plugin'
        task.mustRunAfter cleanPlugins
    }
}

tasks.register('zipPlugins') { task ->
    task.outputs.dir layout.buildDirectory.dir('plugin')
    task.dependsOn cleanPlugins
    task.dependsOn tasks.matching { t -> t.group == 'plugin' }
}

distributions {
    main {
        contents {
            from(zipPlugins) { into 'plugin' }
            from('license') { into 'license' }
            from('executable')
            from('CHANGELOG.md')
        }
    }
}

idea {
    module {
        downloadSources = true
    }
}